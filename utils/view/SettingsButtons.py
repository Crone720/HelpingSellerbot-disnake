import disnake, datetime
from utils import db
from utils import config
class LuckButton(disnake.ui.View):
    def __init__(self, author, member, embed):
        self.author = author
        self.member = member
        self.embed = embed
        super().__init__(timeout=None)

    @disnake.ui.button(label="üíö", style=disnake.ButtonStyle.gray)
    async def luck(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
        if self.author == interaction.author:
            await db.removequeue(interaction.author.id, self.member.id)
            await db.addstat(interaction.author.id)
            em = self.embed.set_footer(text=f"–°—Ç–∞—Ç—É—Å: ‚úÖ")
            await interaction.response.edit_message(embed=em, view=None)
        else:
            await interaction.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å", ephemeral=True)

class BUserSelect(disnake.ui.UserSelect):
    def __init__(self):
        super().__init__(placeholder="–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", min_values=1, max_values=1)

    async def callback(self, interaction: disnake.MessageInteraction):
        member = self.values[0]
        if member.bot:
            return await interaction.response.send_message("–ù–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–π—Ç–µ —Å –±–æ—Ç–∞–º–∏", ephemeral=True)
        role = interaction.guild.get_role(config.banbuyer)
        em = disnake.Embed(title="–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞")
        if config.banbuyer in [role.id for role in member.roles]:
            await member.remove_roles(role)
            em.description = f"–í—ã —Å–Ω—è–ª–∏ —Ç–∏–∫–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.mention}"
            await interaction.response.edit_message(embed=em, view=Back())
            return
        await member.add_roles(role)
        em.description = f"–í—ã –≤—ã–¥–∞–ª–∏ —Ç–∏–∫–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.mention}"
        await interaction.response.edit_message(embed=em, view=Back())
class UserSelect(disnake.ui.UserSelect):
    def __init__(self):
        super().__init__(placeholder="–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", min_values=1, max_values=1)

    async def callback(self, interaction: disnake.MessageInteraction):
        member = self.values[0]
        await db.addqueue(interaction.author.id, member.id)
        embed = disnake.Embed(title="–û—á–µ—Ä–µ–¥—å", description=f"–í—ã –¥–æ–±–∞–≤–∏–ª–∏ {member.mention} –≤ –æ—á–µ—Ä–µ–¥—å")
        await interaction.response.edit_message(embed=embed, view=Back())
        await interaction.send(f"–í—ã –¥–æ–±–∞–≤–∏–ª–∏ {member.mention} –≤ –æ—á–µ—Ä–µ–¥—å", ephemeral=True)
        embed1 = disnake.Embed(title="–û—á–µ—Ä–µ–¥—å", description=f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {member.mention}\n–î–∞—Ç–∞: {datetime.datetime.now().strftime('%d-%m-%Y %H:%M:%S')}")
        embed1.set_footer(text=f"–°—Ç–∞—Ç—É—Å: ‚ùå")
        channel = interaction.guild.get_channel(config.QChannel)
        await channel.send(embed=embed1, view=LuckButton(interaction.author, member, embed1))
class Back(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @disnake.ui.button(label="–ù–∞–∑–∞–¥", style=disnake.ButtonStyle.gray)
    async def back(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
        embed = disnake.Embed(title="–ü–∞–Ω–µ–ª—å", description="")
        await interaction.response.edit_message(embed=embed, view=SettingsButtons())

class SettingsButtons(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @disnake.ui.button(label="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", style=disnake.ButtonStyle.green)
    async def settings(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
        b = await db.getstat(interaction.author.id)
        embed = disnake.Embed(title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", description=f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–ª–∏ {b} —Å–¥–µ–ª–æ–∫.")
        await interaction.response.edit_message(embed=embed, view=Back())

    @disnake.ui.button(label="–î–æ–±–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å", style=disnake.ButtonStyle.gray)
    async def addqueue(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
        embed = disnake.Embed(title="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å", description="–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        view = disnake.ui.View()
        view.add_item(UserSelect())
        await interaction.response.edit_message(embed=embed, view=view)
    
    @disnake.ui.button(label="–°–Ω—è—Ç—å/–í—ã–¥–∞—Ç—å –ë–ª–æ–∫–∏—Ä–æ–≤–∫—É", style=disnake.ButtonStyle.gray, row=2)
    async def banticket(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
        embed = disnake.Embed(title="–í—ã–¥–∞—á–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏", description="–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        view = disnake.ui.View()
        view.add_item(BUserSelect())
        await interaction.response.edit_message(embed=embed, view=view)